{"version":3,"sources":["Traverse.js","Message.js","App.js","index.js"],"names":["Traverse","Object","classCallCheck","this","home","type","value","about","info","contact","github","facebook","youtube","work","projects","skills","prevPath","path","ans","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","i","err","return","join","name","JSON","parse","stringify","pop","temp","split","concat","toConsumableArray","tempObj","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","console","log","Message","react_default","a","createElement","props","command","Component","traverse","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","commands","e","setState","target","map","el","src_Message","ls","toString","_this2","className","renderCommands","onChange","handleOnChange","bind","onClick","handleClick","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.df600786.chunk.js","sourcesContent":["class Traverse {\n    constructor() {\n        this.home = {\n            type: \"directory\",\n            value: {\n                about: {\n                    type: \"directory\",\n                    value: {\n                        info: {\n                            type: \"file\",\n                            value: \"Hi i am Stuart\"\n                        },\n                    }\n                },\n                contact: {\n                    type: \"directory\",\n                    value: {\n                        github: {\n                            type: \"directory\",\n                            value: \"gitlink\"\n                        },\n                        facebook: {\n                            type: \"file\",\n                            value: \"fblink\"\n                        },\n                        youtube: {\n                            type: \"file\",\n                            value: \"ytlink\"\n                        }\n                    }\n                },\n                work: '',\n                projects: \"\",\n                skills: \"\"\n            }\n\n        };\n        this.prevPath = [];\n        this.path = [];\n    }\n    ls() {\n        let ans = this.home;\n        for (let i of this.path) {\n            ans = ans.value[i];\n        }\n        if (ans.type === 'directory') {\n            return ans.value;\n        } else {\n            return \"Not a directory\";\n        }\n    }\n    pwd() {\n        return \"~/\" + this.path.join(\"/\");\n    }\n    cd(name) {\n        if (name === '..') {\n            this.prevPath = JSON.parse(JSON.stringify(this.path));\n            this.path.pop();\n        } else if (name === '.') {\n            // directory remains unchanged\n        } else if (name === '-') {\n            let temp = JSON.parse(JSON.stringify(this.prevPath));\n            this.prevPath = JSON.parse(JSON.stringify(this.path));\n            this.path = JSON.parse(JSON.stringify(temp));\n        } else {\n            this.prevPath = JSON.parse(JSON.stringify(this.path));\n            name = name.split(\"/\");\n            let ans = [...this.path, ...name];\n            let tempObj = JSON.parse(JSON.stringify(this.home))\n            for (let i of ans) {\n                tempObj = tempObj.value[i];\n            }\n            if (tempObj.type === 'file') {\n                console.log(\"cant cd to file\");\n            } else {\n                this.path = [...this.path, ...name]\n            }\n\n\n        }\n\n    }\n\n}\n\n\n/*\n\n\nfunction traverse() {\n    let obj = {\n        type: \"directory\",\n        value: {\n            about: {\n                type: \"directory\",\n                value: {\n                    info: {\n                        type: \"file\",\n                        value: \"Hi i am Stuart\"\n                    },\n                }\n            },\n            contact: {\n                type: \"directory\",\n                value: {\n                    github: {\n                        type: \"directory\",\n                        value: \"gitlink\"\n                    },\n                    facebook: {\n                        type: \"file\",\n                        value: \"fblink\"\n                    },\n                    youtube: {\n                        type: \"file\",\n                        value: \"ytlink\"\n                    }\n                }\n            },\n            work: '',\n            projects: \"\",\n            skills: \"\"\n        }\n\n    }\n    let prevPath = [];\n    let path = [];\n    return {\n        ls() {\n            let ans = obj;\n            for (let i of path) {\n                ans = ans.value[i];\n            }\n            if (ans.type === 'directory') {\n                console.log(ans.value)\n            } else {\n                console.log(\"Not a directory\");\n            }\n\n        },\n        cat() {\n            let ans = obj;\n            for (let i of path) {\n                ans = ans.value[i];\n            }\n            if (ans.type === 'file') {\n                console.log(ans.value)\n            } else {\n                console.log(\"cant cat a dir\");\n            }\n\n        },\n        pwd() {\n            console.log(\"~/\" + path.join(\"/\"));\n        },\n        cd(name) {\n            if (name === '..') {\n                prevPath = JSON.parse(JSON.stringify(path));\n                path.pop();\n            } else if (name === '.') {\n                // directory remains unchanged\n            } else if (name === '-') {\n                let temp = JSON.parse(JSON.stringify(prevPath));\n                prevPath = JSON.parse(JSON.stringify(path));\n                path = JSON.parse(JSON.stringify(temp));\n            } else {\n                prevPath = JSON.parse(JSON.stringify(path));\n                name = name.split(\"/\");\n                let ans = [...path, ...name];\n                let tempObj = JSON.parse(JSON.stringify(obj))\n                for (let i of ans) {\n                    tempObj = tempObj.value[i];\n                }\n                if (tempObj.type === 'file') {\n                    console.log(\"cant cd to file\");\n                } else {\n                    path = [...path, ...name]\n                }\n\n\n            }\n\n        }\n    }\n}\n\nlet temp = traverse();\ntemp.cd(\"contact/github\")\ntemp.ls();\ntemp.pwd();\ntemp.cd(\"..\")\ntemp.ls();\ntemp.pwd();\n// temp.cd(\"info\");\n// temp.pwd();\n// temp.cat();\n\n\n\n/*\nIn CD\n    check for valid path\n    check for ... or other chars\n    after split check if obj returns anythig,,,, else throw error\n    handle trailing slash\n\nIn OBJ\n    define structre\n        type - directory/ link / file\n        value- actual value\n\nIn ls\n    -a - add fun\n\n*/\n\nexport default Traverse;","import React, { Component } from 'react';\n\nclass Message extends Component {\n\n \n\n  render() {\n    return (\n      <div>\n        {this.props.command}\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Traverse from './Traverse';\nimport Message from './Message';\n\nconst traverse = new Traverse();\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      command: \"\",\n      commands: [],\n      traverse:{}\n    }\n  }\n  componentWillMount(){\n\n  }\n  handleOnChange(e) {\n    this.setState({\n      command: e.target.value\n    })\n  }\n  renderCommands() {\n    return this.state.commands.map(el => {\n      return <Message command={traverse.ls().toString()} />\n    })\n  }\n  handleClick() {\n    this.setState({\n      commands: [...this.state.commands, this.state.command]\n    }, () => {\n      this.setState({\n        command: \"\"\n      })\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        {this.renderCommands()}\n        <div>\n          <div>Type here <span><input value={this.state.command} onChange={this.handleOnChange.bind(this)} /></span></div>\n          <button onClick={this.handleClick.bind(this)} >Add Command</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}
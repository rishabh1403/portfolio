{"version":3,"sources":["Traverse.js","Directory.js","File.js","ListLs.js","Message.js","WelcomeText.js","App.js","index.js"],"names":["Traverse","Object","classCallCheck","this","home","type","value","about","info","contact","github","facebook","youtube","prevPath","path","ans","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","i","err","return","data","success","obj","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","console","log","join","name","JSON","parse","stringify","pop","temp","split","concat","toConsumableArray","tempObj","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","props","react_default","a","createElement","className","Component","keys","reduce","acc","el","map","Directory_default","File_default","renderData","Message","command","ListLs_default","Fragment","traverse","App","_this","possibleConstructorReturn","getPrototypeOf","call","handleChange","evt","test","target","handleClick","setState","state","commands","html","contentEditable","React","createRef","textInput","_this2","current","focus","setInterval","e","_this3","_this$state","commandOptions","lsresult","ls","cd","index","src_Message","key","toString","WelcomeText_default","renderCommands","react_contenteditable_default","autoCorrect","autoCapitalize","innerRef","disabled","onChange","tagName","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.82de08da.chunk.js","sourcesContent":["class Traverse {\n    constructor() {\n        this.home = {\n            type: 'directory',\n            value: {\n                about: {\n                    type: 'directory',\n                    value: {\n                        info: {\n                            type: 'file',\n                            value: 'Hi i am Stuart',\n                        },\n                    },\n                },\n                contact: {\n                    type: 'file',\n                    value: {\n                        github: {\n                            type: 'directory',\n                            value: 'gitlink',\n                        },\n                        facebook: {\n                            type: 'file',\n                            value: 'fblink',\n                        },\n                        youtube: {\n                            type: 'file',\n                            value: 'ytlink',\n                        },\n                    },\n                },\n                // work: '',\n                // projects: '',\n                // skills: '',\n            },\n\n        };\n        this.prevPath = [];\n        this.path = [];\n    }\n\n    ls() {\n        let ans = this.home;\n        for (let i of this.path) {\n            ans = ans.value[i];\n        }\n        if (ans.type === 'directory') {\n            return {\n                data: ans.value,\n                success: true,\n                type: 'LIST',\n            };\n        } else {\n            return 'Not a directory';\n        }\n    }\n\n    cat() {\n        let ans = this.obj;\n        for (let i of this.path) {\n            ans = ans.value[i];\n        }\n        if (ans.type === 'file') {\n            console.log(ans.value);\n        } else {\n            console.log('cant cat a dir');\n        }\n\n    }\n\n    pwd() {\n        return '~/' + this.path.join('/');\n    }\n\n    cd(name) {\n        if (name === '..') {\n            this.prevPath = JSON.parse(JSON.stringify(this.path));\n            this.path.pop();\n        } else if (name === '.') {\n            // directory remains unchanged\n        } else if (name === '-') {\n            const temp = JSON.parse(JSON.stringify(this.prevPath));\n            this.prevPath = JSON.parse(JSON.stringify(this.path));\n            this.path = JSON.parse(JSON.stringify(temp));\n        } else {\n            this.prevPath = JSON.parse(JSON.stringify(this.path));\n            name = name.split('/');\n            let ans = [...this.path, ...name];\n            let tempObj = JSON.parse(JSON.stringify(this.home))\n            for (let i of ans) {\n                tempObj = tempObj.value[i];\n            }\n            if (tempObj.type === 'file') {\n                console.log('cant cd to file');\n            } else {\n                this.path = [...this.path, ...name]\n            }\n        }\n        return {};\n    }\n\n}\n\n\n/*\n\n\nfunction traverse() {\n    let obj = {\n        type: 'directory',\n        value: {\n            about: {\n                type: 'directory',\n                value: {\n                    info: {\n                        type: 'file',\n                        value: 'Hi i am Stuart'\n                    },\n                }\n            },\n            contact: {\n                type: 'directory',\n                value: {\n                    github: {\n                        type: 'directory',\n                        value: 'gitlink'\n                    },\n                    facebook: {\n                        type: 'file',\n                        value: 'fblink'\n                    },\n                    youtube: {\n                        type: 'file',\n                        value: 'ytlink'\n                    }\n                }\n            },\n            work: '',\n            projects: '',\n            skills: ''\n        }\n\n    }\n    let prevPath = [];\n    let path = [];\n    return {\n        ls() {\n            let ans = obj;\n            for (let i of path) {\n                ans = ans.value[i];\n            }\n            if (ans.type === 'directory') {\n                console.log(ans.value)\n            } else {\n                console.log('Not a directory');\n            }\n\n        },\n        cat() {\n            let ans = obj;\n            for (let i of path) {\n                ans = ans.value[i];\n            }\n            if (ans.type === 'file') {\n                console.log(ans.value)\n            } else {\n                console.log('cant cat a dir');\n            }\n\n        },\n        pwd() {\n            console.log('~/' + path.join('/'));\n        },\n        cd(name) {\n            if (name === '..') {\n                prevPath = JSON.parse(JSON.stringify(path));\n                path.pop();\n            } else if (name === '.') {\n                // directory remains unchanged\n            } else if (name === '-') {\n                let temp = JSON.parse(JSON.stringify(prevPath));\n                prevPath = JSON.parse(JSON.stringify(path));\n                path = JSON.parse(JSON.stringify(temp));\n            } else {\n                prevPath = JSON.parse(JSON.stringify(path));\n                name = name.split('/');\n                let ans = [...path, ...name];\n                let tempObj = JSON.parse(JSON.stringify(obj))\n                for (let i of ans) {\n                    tempObj = tempObj.value[i];\n                }\n                if (tempObj.type === 'file') {\n                    console.log('cant cd to file');\n                } else {\n                    path = [...path, ...name]\n                }\n\n\n            }\n\n        }\n    }\n}\n\nlet temp = traverse();\ntemp.cd('contact/github')\ntemp.ls();\ntemp.pwd();\ntemp.cd('..')\ntemp.ls();\ntemp.pwd();\n// temp.cd('info');\n// temp.pwd();\n// temp.cat();\n\n\n/*\nIn CD\n    check for valid path\n    check for ... or other chars\n    after split check if obj returns anythig,,,, else throw error\n    handle trailing slash\n    handle ../xyz\n    \n\nIn OBJ\n    define structre\n        type - directory/ link / file\n        value- actual value\n\nIn ls\n    -a - add fun\n\n*/\n\nexport default Traverse;\n","import React, { Component } from 'react';\n\nexport default class extends Component {\n\n  render() {\n    console.log(this.props);\n    return (\n      <span className=\"directory-name\">\n        {this.props.data}\n      </span>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class extends Component {\n\n  render() {\n    console.log(this.props);\n    return (\n      <span className=\"file-name\">\n        {this.props.data}\n      </span>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Directory from './Directory';\nimport File from './File';\nexport default class extends Component {\n\n  renderData(data) {\n    let keys = Object.keys(data);\n    return keys.reduce((acc, el) => {\n      return [...acc, [el, data[el]]]\n    }, []).map(el => {\n      if (el[1].type === 'directory') {\n        return <Directory data={el[0] + \" \"} />\n      }else{\n        return <File data={el[0] + \" \"} />\n      }\n\n    })\n    // console.log(x)\n  }\n\n  render() {\n    console.log(this.props);\n    return (\n      <div>\n        {this.props.data && this.renderData(this.props.data.data)}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ListLs from './ListLs';\nclass Message extends Component {\n  render() {\n    console.log(this.props);\n    return (\n      <div>\n        {this.props.command.type === 'LIST' ? <ListLs data={this.props.command} /> : null}\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, { Component } from 'react';\n\nexport default class extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div>Type <code>help</code> in case you need help navigating through the page</div>\n      </React.Fragment>\n    );\n  }\n}\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Traverse from './Traverse';\nimport Message from './Message';\nimport WelcomeText from './WelcomeText'\nimport ContentEditable from 'react-contenteditable'\n\nconst traverse = new Traverse();\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      command: '',\n      commands: [],\n      html: \"\"\n    };\n    this.contentEditable = React.createRef();\n    // this.state = { html: \"<b>Hello <i>World</i></b>\" };\n    this.textInput = React.createRef();\n  }\n  componentDidMount() {\n    this.contentEditable.current.focus();\n    setInterval(() => {\n\n      this.contentEditable.current.focus();\n    }, 1000)\n    console.log(this.contentEditable);\n  }\n  handleChange = evt => {\n    console.log(evt);\n    if (/<br>/.test(evt.target.value)) {\n      // console.log(\"enter press\")\n      this.handleClick();\n    }\n    this.setState({ command: evt.target.value });\n  };\n  handleClick(e) {\n    // e.preventDefault();\n    const { command, commands } = this.state;\n    const commandOptions = command.split(' ');\n    let lsresult = '';\n    if (commandOptions[0] === 'ls') {\n      lsresult = traverse.ls();\n    } else if (commandOptions[0] === 'cd') {\n      lsresult = Object.keys(traverse.cd(commandOptions[1])).join(' ');\n    } else if (commandOptions[0] === 'help') {\n      lsresult = `Type 'ls' to check contents of current directory, 'cd' to change directory`;\n    }\n\n    this.setState({\n      commands: [...commands, lsresult],\n    }, () => {\n      this.setState({\n        command: '',\n      });\n    });\n\n  }\n\n  renderCommands() {\n    const { commands } = this.state;\n    return commands.map((el, index) => {\n      // const lsresult = Object.keys(traverse.ls()).toString();\n\n      return <Message key={index.toString()} command={el} />;\n    });\n  }\n\n  render() {\n    // const { command } = this.state;\n    return (\n      <React.Fragment>\n        <WelcomeText />\n        {this.renderCommands()}\n        <React.Fragment>\n          \n          <span className=\"shell\"><b>$ ></b></span>\n\n          <ContentEditable\n            className=\"test\"\n            autoCorrect=\"off\"\n            autoCapitalize=\"none\"\n            innerRef={this.contentEditable}\n            html={this.state.command} // innerHTML of the editable div\n            disabled={false}       // use true to disable editing\n            onChange={this.handleChange} // handle innerHTML change\n            tagName='span' // Use a custom HTML tag (uses a div by default)\n          />\n          <div className=\"cursor\"></div>\n        </React.Fragment>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}